generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model testing {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model users {
  id            String     @id @default(cuid())
  username      String     @unique
  email         String     @unique
  emailVerified DateTime?
  name          String
  createdAt     DateTime   @default(now())
  character     Character?
}

model Character {
  id   Int    @id @default(autoincrement())
  name String

  level      Int       @default(1)
  gold       Int       @default(0)
  class      Class?    @default(NONE)
  subclass   Subclass? @default(NONE)
  experience Int       @default(0)
  health     Int       @default(100)
  maxHealth  Int       @default(100)
  mana       Int       @default(50)
  maxMana    Int       @default(50)
  energy     Int       @default(100)
  maxEnergy  Int       @default(100)

  Strength  Int @default(10)
  Defense   Int @default(10)
  Agility   Int @default(10)
  Vitality  Int @default(10)
  Endurance Int @default(10)
  Will      Int @default(10)

  strengthXp  Float @default(0) //Created trigger function for this.
  defenseXp   Float @default(0) //Created trigger function for this.
  agilityXp   Float @default(0) //Created trigger function for this.
  vitalityXp  Float @default(0) //Created trigger function for this.
  enduranceXp Float @default(0) //Created trigger function for this.
  willXp      Float @default(0) //Created trigger function for this.

  Owner    users     @relation(fields: [OwnerId], references: [id])
  OwnerId  String    @unique
  Tasks    Task[]
  Habits   Habit[]
  Routines Routine[]

  TasksDone    Int @default(0)
  HabitsDone   Int @default(0)
  RoutinesDone Int @default(0)
}

model Task {
  id Int @id @default(autoincrement())

  title       String
  description String?

  createdAt DateTime  @default(now())
  dueDate   DateTime?
  completed Boolean   @default(false)

  difficultyRank DifficultyRank @default(E)

  experienceReward Int?
  goldReward       Int?
  StrengthReward   Int?
  DefenseReward    Int?
  AgilityReward    Int?
  VitalityReward   Int?
  EnduranceReward  Int?
  WillReward       Int?

  Character   Character @relation(fields: [CharacterId], references: [id])
  CharacterId Int
}

model Habit {
  id Int @id @default(autoincrement())

  title       String
  description String?

  createdAt       DateTime  @default(now())
  lastCompleted   DateTime?
  completeBy      DateTime?
  totalCompletion Int       @default(0)
  streak          Int       @default(0)

  repeat                Repeat @default(DAILY)
  currentCompletions    Int    @default(0)
  completionGoalWeekly  Int?
  completionGoalMonthly Int?

  quitting Boolean @default(false)

  difficultyRank DifficultyRank @default(E)

  experienceReward Int?
  goldReward       Int?
  StrengthReward   Int?
  DefenseReward    Int?
  AgilityReward    Int?
  VitalityReward   Int?
  EnduranceReward  Int?
  WillReward       Int?

  Character   Character @relation(fields: [CharacterId], references: [id])
  CharacterId Int
}

model Routine {
  id Int @id @default(autoincrement())

  title       String
  description String?

  createdAt     DateTime  @default(now())
  lastCompleted DateTime?

  daysOfWeek              Int[]
  startTimeOfDayInMinutes Int
  endTimeOfDayInMinutes   Int

  difficultyRank DifficultyRank @default(E)

  experienceReward Int?
  goldReward       Int?
  StrengthReward   Int?
  DefenseReward    Int?
  AgilityReward    Int?
  VitalityReward   Int?
  EnduranceReward  Int?
  WillReward       Int?

  Character   Character @relation(fields: [CharacterId], references: [id])
  CharacterId Int
}

enum Class {
  NONE
  WARRIOR
  MAGE
  ROGUE
  RANGER
  CLERIC
  ASSASSIN
}

enum Subclass {
  NONE

  BERSERKER
  PALADIN
  GUARDIAN
  DESTROYER
  SLAYER

  SORCERER
  SUMMONER
  ELEMENTALIST
  NECROMANCER
  ALCHEMIST

  THIEF

  SHARPSHOOTER
  GUNSLINGER
  ARTILLERIST

  PRIEST
  MONK
  DRUID
  SHAMAN
  BARD

  NINJA
  SOULREAPER
  SHADOWHUNTER
  DEATHBLADE
  NIGHTSTALKER
}

enum DifficultyRank {
  F
  E
  D
  C
  B
  A
  S
  SS
  SSS
}

enum Repeat {
  DAILY
  WEEKLY
  MONTHLY
}
