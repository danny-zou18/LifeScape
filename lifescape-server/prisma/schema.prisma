generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model testing {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model users {
  id            String       @id @default(cuid())
  username      String       @unique
  email         String       @unique
  emailVerified DateTime?
  name          String
  createdAt     DateTime     @default(now())
  character     Character?
  friends       Friendship[] @relation("friend_friendships")
  friendships   Friendship[] @relation("user_friendships")
}

model Friendship {
  id              String           @id @default(cuid())
  user_id         String
  friend_id       String
  user_username   String
  friend_username String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  status          FriendShipStatus @default(PENDING)
  friend          users            @relation("friend_friendships", fields: [friend_id], references: [id])
  user            users            @relation("user_friendships", fields: [user_id], references: [id])

  @@unique([user_id, friend_id])
  @@unique([friend_id, user_id])
}

model Character {
  id                Int       @id @default(autoincrement())
  name              String
  level             Int       @default(1)
  experience        Int       @default(0)
  health            Int       @default(100)
  mana              Int       @default(50)
  energy            Int       @default(100)
  Strength          Int       @default(10)
  Defense           Int       @default(10)
  Agility           Int       @default(10)
  Vitality          Int       @default(10)
  Endurance         Int       @default(10)
  Will              Int       @default(10)
  OwnerId           String    @unique
  TotalHabitsDone   Int       @default(0)
  TotalRoutinesDone Int       @default(0)
  TotalTasksDone    Int       @default(0)
  agilityXp         Float     @default(0)
  class             Class?    @default(NONE)
  defenseXp         Float     @default(0)
  enduranceXp       Float     @default(0)
  gold              Int       @default(0)
  maxEnergy         Int       @default(100)
  maxHealth         Int       @default(100)
  maxMana           Int       @default(50)
  strengthXp        Float     @default(0)
  subclass          Subclass? @default(NONE)
  vitalityXp        Float     @default(0)
  willXp            Float     @default(0)
  Owner             users     @relation(fields: [OwnerId], references: [id])
  Habits            Habit[]
  Routines          Routine[]
  Tasks             Task[]
  Items             items[]
}

model Task {
  id               Int            @id @default(autoincrement())
  title            String
  description      String?
  createdAt        DateTime       @default(now())
  dueDate          DateTime?
  completed        Boolean        @default(false)
  experienceReward Int?
  goldReward       Int?
  StrengthReward   Int?
  DefenseReward    Int?
  AgilityReward    Int?
  VitalityReward   Int?
  EnduranceReward  Int?
  WillReward       Int?
  CharacterId      Int
  difficultyRank   DifficultyRank @default(E)
  Character        Character      @relation(fields: [CharacterId], references: [id])
}

model Habit {
  id                    Int            @id @default(autoincrement())
  title                 String
  description           String?
  createdAt             DateTime       @default(now())
  streak                Int            @default(0)
  repeat                Repeat         @default(DAILY)
  completionGoalWeekly  Int?
  completionGoalMonthly Int?
  quitting              Boolean        @default(false)
  difficultyRank        DifficultyRank @default(E)
  experienceReward      Int?
  goldReward            Int?
  StrengthReward        Int?
  DefenseReward         Int?
  AgilityReward         Int?
  VitalityReward        Int?
  EnduranceReward       Int?
  WillReward            Int?
  CharacterId           Int
  currentCompletions    Int            @default(0)
  lastCompleted         DateTime?
  completeBy            DateTime?
  totalCompletion       Int            @default(0)
  Character             Character      @relation(fields: [CharacterId], references: [id])
}

model Routine {
  id                      Int            @id @default(autoincrement())
  title                   String
  description             String?
  createdAt               DateTime       @default(now())
  daysOfWeek              Int[]
  startTimeOfDayInMinutes Int
  difficultyRank          DifficultyRank @default(E)
  experienceReward        Int?
  goldReward              Int?
  StrengthReward          Int?
  DefenseReward           Int?
  AgilityReward           Int?
  VitalityReward          Int?
  EnduranceReward         Int?
  WillReward              Int?
  CharacterId             Int
  endTimeOfDayInMinutes   Int
  lastCompleted           DateTime?
  Character               Character      @relation(fields: [CharacterId], references: [id])
}

model items {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  cost        Int
  rarity      Int
  type        ItemType
  CharacterId Int
  path        String?
  Quantity    Int       @default(1)
  Character   Character @relation(fields: [CharacterId], references: [id])
  Equipped    Boolean   @default(false)
}

enum Class {
  NONE
  WARRIOR
  MAGE
  ROGUE
  RANGER
  CLERIC
  ASSASSIN
}

enum Subclass {
  NONE
  BERSERKER
  PALADIN
  GUARDIAN
  DESTROYER
  SLAYER
  SORCERER
  SUMMONER
  ELEMENTALIST
  NECROMANCER
  ALCHEMIST
  THIEF
  SHARPSHOOTER
  GUNSLINGER
  ARTILLERIST
  PRIEST
  MONK
  DRUID
  SHAMAN
  BARD
  NINJA
  SOULREAPER
  SHADOWHUNTER
  DEATHBLADE
  NIGHTSTALKER
}

enum DifficultyRank {
  F
  E
  D
  C
  B
  A
  S
  SS
  SSS
}

enum Repeat {
  DAILY
  WEEKLY
  MONTHLY
}

enum FriendShipStatus {
  PENDING
  FRIENDS
  DECLINED
  BLOCKED
  REMOVED
}

enum ItemType {
  WEAPON
  HEADGEAR
  CHESTGEAR
  LEGGEAR
  FOOTGEAR
  QUEST
  KEY
  MISC
  ACCESSORY
}
